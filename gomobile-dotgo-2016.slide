Make mobile programming fun (again)
dotGo Paris 2016

Elias Naur
elias.naur@gmail.com
@elias_naur

* What is Go Mobile?


Go runs on the mobile devices, Go Mobile builds on that to make it convenient to use Go from mobile apps.

In particular, Java and Objective C code generation based off your Go packages.


* Why Go Mobile?

It's Go!

Write (some of it) once.

* Generating bindings

* Setup

First, you'll need the the `gomobile` tool:

 go get -u golang.org/x/mobile/cmd/gomobile

Then, initialize it:

 gomobile init

* Bind your Go package(s)

The `gomobile` `bind` command generates bindings for Go package(s).

Android:

 gomobile bind -target=android github.com/some/package another/package ...

iOS:

 gomobile bind -target=ios github.com/some/package another/package ...

* Using bindings

* Functions

Go

 package pkg

 func F(s string) { ... }

Java

 import go.pkg.Pkg;

 Pkg.f("Hi!");

Objective C

 @import pkg;

 GoPkgF(@"Hi!");

* Constants and variables

Go

 const FourtyTwo = 42
 var Var string

Java

 long i = Pkg.FourtyTwo;
 Pkg.setVar("Set from Java");

Objective C

 long i = GoPkgFourtyTwo;
 GoPkg.var = "Set from Objective C";

* Structs

Go

 package pkg;

 type S struct {
 }

 func (s *S) F() { ... }

 func GimmeAnS() *S { ... }

Java

 import go.pkg.S;
 
 S anS = Pkg.GimmeAnS();
 anS.f();

Objective C

 GoPkgS *anS = GoPkgGimmeAnS();
 [anS f];

* Interfaces

Go

 type I interface {
     F()
 }

 func GimmeAnI() I { ... }

Java

 I anI = Pkg.GimmeAnI();
 anI.f();

Objective C

 @import pkg;

 id<GoPkgI> anI = GoPkgGimmeAnI();
 [anI f];


* Implementing interfaces


Go

 type I interface {
     F()
 }
 func TakeAnI(anI I) { ... }

Java

 Pkg.TakeAnI(new I() {
     @Override public void f() { ... }
 });

Objective C

 @interface ObjCI : NSObject<GoPkgI>
 @end
 @implementation ObjCI
 - (void)f { ... }
 @end

 GoPkgTakeAnI([[ObjCI alloc] init]);

* Errors

Go errors are translated to Java Exceptions or Objective C NSErrors (and back).

Go

 func F() error { ... }

Java

 try {
     Pkg.f();
 } catch (Exception e) {
     ...
 }

Objective C

 NSError *error;
 BOOL success = GoPkgF(&error)




* Go Mobile UI


* Using callbacks

Implementing UI in Go is possible with callbacks. Let's call Activity.finish() from Go:

Go

 type Activity interface {
     Finish()
 }

 func CallFinish(a Activity) {
     a.Finish()
 }

Java

 public class SomeActivity extends Activity implements go.pkg.Activity {
     @Override public void onCreate(Bundle state) {
         super.onCreate(state);
         Pkg.callFinish(this);
     }
 }

* Using callbacks

Possible, but verbose: don't want to write wrappers for every platform API.

SomeActivity is still implemented in Java.

* Use the platform APIs directly

Android SDK

 import "Java/java/lang/Object" // import java.lang.Object
 import "Java/java/lang/System" // import java.lang.System
 import "Java/java/lang/Integer" // import java.lang.Integer

 m := System.CurrentTimeMillis() // System.currentTimeMillis()
 o := Object.New() // new Object()
 i := Integer.Decode("42") // Integer.decode("42")
 v := i.IntValue() // i.intValue()

ObjC frameworks

 import "ObjC/Foundation/NSDate" // @import Foundation.NSDate

 d := NSDate.New() // [[NSDate alloc] init]
 d = NSDate.Date() // [NSDate date]
 var desc string = d.Description() // [d description]


* Write Java classes in Go

An Android Activity

AndroidManifest.xml

 <activity android:name="GoActivity">

Go

 import "Java/android/app"
 import "Java/android/os"

 type GoActivity struct {
     app.Activity
 }

 func (a *GoActivity) OnCreate1(b os.Bundle) { ... }

Implementing Java interfaces works same way.

* Write Objective C classes in Go

An iOS UIResponder

 import "ObjC/UIKit"
 import "ObjC/Foundation"

 type GoUIResponder struct {
     UIKit.UIResponder
 }

 func (r *GoUIResponder) PressesBegan(_ Foundation.NSSet, _ UIKit.UIPressesEvent) { ... }

Conforming to Objective C protocols works the same way.

* Gobind gradle plugin (Android)

The updated gobind gradle plugin brings tighter integration with the Android plugin.
Apply it *after* the Android plugin.

build.gradle

 apply plugin: 'com.android.application'

 ...

 apply plugin: "org.golang.mobile.bind"

 gobind {
    pkg = "github.org/some/pkg"
 }


* Access to project dependencies

build.gradle

 dependencies {
    compile "com.android.support:appcompat-v7:24.2.1"
 }

Go

 import "Java/android/support/v7/app"

 type SupportActivity struct {
    app.AppCompatActivity
 }

* Resource classes, R.* (Android)

strings.xml

 <resources>
    <string name="activity_title">Pure Go Activities!</string>
 </resources>

Go

 import "Java/android/app"
 import Rstring "Java/go/demo/R/string"

 var act app.Activity = ...
 act.SetTitle_I(Rstring.Activity_title)

* Android databinding

activity_main.xml

 <layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <data>
        <variable name="act" type="go.demo.GoActivity"/>
    </data>
    <Button android:onClick="@{act::clickMe}"/>
 </layout>

Go

 import "Java/android/databinding/DataBindingUtil"
 import Rlayout "Java/go/demo/R/layout"
 import "Java/go/demo/databinding/ActivityMainBinding"

 func (a *GoActivity) OnCreate1(this app.Activity, b os.Bundle) {
     db := DataBindingUtil.SetContentView2(this, Rlayout.Activity_main)
     mainBind := ActivityMainBinding.Cast(db)
     mainBind.SetAct(this)
 }

 func (a *GoActivity) ClickMe(this app.Activity, v view.View) { ... }

* Caveats

- Still experimental. Changes happen.
- Go binaries still somewhat large.
- Reference cycles.

* Summary

- Export Go packages to Java and ObjC (and Swift).
- Access Java and ObjC API from Go.
- Write Java and ObjC classes directly in Go.
- On Android, use databinding and R.* resources from Go.
