# Go Mobile: Are we there yet?
Make mobile programming fun (again)
dotGo Paris 2016

Elias Naur
elias.naur@gmail.com
@elias_naur

* What is Go Mobile?

: Hi. I'd like to spend the next few minutes to show you just how much is possible with Go Mobile today. My ulterior motive, of course, is to persuade you to consider Go Mobile for your next, or even your current, mobile project

Go runs on the mobile devices, Go Mobile builds on that to make it convenient to use Go from mobile apps.

: Started in 2014 in David Crawshaw as an experimental Google project.

: There is also support for all-Go apps such as games that need very little interaction with the platform APIs. This talk is about gomobile bind that enables tight integration with the platform APIs.

: Go can compile and build executables for both Android and iOS on x86, arm, arm64.

In particular, Java and Objective C code generation based off your Go packages.

: Also useable from Swift.

#- Automatic reference tracking.

* Why Go Mobile?

It's Go!

: So, why use Gomobile at all? I think the basic premise is both obvious and probably shared by most of us in here: You get to use Go, unrestricted and in the same way as you know it from desktop or backend programs.
: It's also the one feature gomobile has that Xamarin, Cordova, React Native and so on don't have.

Write (some of it) once.

: The second reason is important if you're writing an app that need to work on both Android an iOS. In fact, if your app starts out on one platform and there's even a remote possibility that you'll need to port it to the other, gomobile might be a very good fit for you.

: Not having to write your application logic twice for Android and iOS is both a relief, a way to increase reliability and to reduce the time and/or costs to develop you app. The most extreme examples are bitcoin wallet app. They have very complicated decentralised logic embedded, and many apps only exist for one platform. If they exist on both, one version quite often lags behind the main paltform.

: If you need to interface Go code directly from you app, and not rewrite it (again, twice!) after writing the backend Go version, use gomobile.

: Go Mobile is not a framework, you can use Go as little or as much as you like.

* Generating bindings

: Let's go through the steps to go from a working Go installion to a running app.
: With gomobile, I recommend Go 1.7.1 or better. Many small fixes and improvements have gone into Go 1.7 for Android and iOS.

* Setup

First, you'll need the the `gomobile` tool:

 go get -u golang.org/x/mobile/cmd/gomobile

Then, initialize it:

 gomobile init

: This might take a while, because as part of initializing, `gomobile`init` downloads a stripped down Android SDK.

* Bind your Go package(s)

The `gomobile` `bind` command generates bindings for Go package(s).

Android:

 gomobile bind -target=android github.com/some/package another/package ...

: If you leave out the target, gomobile bind defaults to Android. This command will leave a package.aar in your currenct directory, ready to use.

iOS:

 gomobile bind -target=ios github.com/some/package another/package ...

: You'll need to run on macOS and have the XCode Command Lines utilities installed for this to work. Android will work on linux, macOS and Windows.
: This will generate a Package.framework framework ready to use.

#* Import the bindings

#: So you've generated bindings for your Go package. What now?

#For Android, use the Go Mobile gradle plugin to automate `gomobile`bind`.

#On iOS, import the generated framework in your XCode project once and use `gomobile`bind` to update it.

#There is a complete example for both Android and iOS in the golang.org/x/mobile/example/bind package.

* Using bindings

* Functions

Go

 package pkg

 func F(s string) { ... }

Java

 import go.pkg.Pkg;

 Pkg.f("Hi!");

: Notice the lower case name and go mobile generated a package class to contains all the global functions, constants and variables.
: The Java package name can be customized. The default is "go" prefixed to the Go package name.

Objective C

 @import pkg;

 GoPkgF(@"Hi!");

: Apart from the ObjC import statement, this is very similar to what Cgo would give you.

* Constants and variables

Go

 const FourtyTwo = 42
 var Var string
# type S struct {
#     Field float32
# }

Java

 long i = Pkg.FourtyTwo;
 Pkg.setVar("Set from Java");
# float32 f = s.getField();

Objective C

 long i = GoPkgFourtyTwo;
 GoPkg.var = "Set from Objective C";
# float f = [s field];

* Structs

Go

 package pkg;

 type S struct {
 }

 func (s *S) F() { ... }

 func GimmeAnS() *S { ... }

Java

 import go.pkg.S;
 
 S anS = Pkg.GimmeAnS();
 anS.f();

Objective C

 GoPkgS *anS = GoPkgGimmeAnS();
 [anS f];

* Interfaces

Go

 type I interface {
     F()
 }

 func GimmeAnI() I { ... }

Java

 I anI = Pkg.GimmeAnI();
 anI.f();

Objective C

 @import pkg;

 id<GoPkgI> anI = GoPkgGimmeAnI();
 [anI f];

: The returned instance of S is in fact a Java or ObjC class that proxies the underlying Go instance. Go Mobile takes care of forwarding calls to the proxy instance. It also makes sure to keep track og all references to to the instance so that Go won't garbage collect it while using it from your app.

* Implementing interfaces

: The other way is also possible

Go

 type I interface {
     F()
 }
 func TakeAnI(anI I) { ... }

Java

 Pkg.TakeAnI(new I() {
     @Override public void f() { ... }
 });

Objective C

 @interface ObjCI : NSObject<GoPkgI>
 @end
 @implementation ObjCI
 - (void)f { ... }
 @end

 GoPkgTakeAnI([[ObjCI alloc] init]);

* Errors

Go errors are translated to Java Exceptions or Objective C NSErrors (and back).

Go

 func F() error { ... }

Java

 try {
     Pkg.f();
 } catch (Exception e) {
     ...
 }

Objective C

 NSError *error;
 BOOL success = GoPkgF(&error)


: This is very useful for implementing callbacks from Go to Java or Objective C code.

: Go Mobile takes care of keeping a reference to the callback objects for as long as they're referenced from Go.

* Go Mobile UI

: That's all well and good, but what about the rest of the app? That's still a bunch of Java or Objective C, or even Swift, right?

* Using callbacks

Implementing UI in Go is possible with callbacks. Let's call Activity.finish() from Go:

Go

 type Activity interface {
     Finish()
 }

 func CallFinish(a Activity) {
     a.Finish()
 }

Java

 public class SomeActivity extends Activity implements go.pkg.Activity {
     @Override public void onCreate(Bundle state) {
         super.onCreate(state);
         Pkg.callFinish(this);
     }
 }

* Using callbacks

Possible, but verbose: don't want to write wrappers for every platform API.

SomeActivity is still implemented in Java.

* Use the platform APIs directly

Android SDK

 import "Java/java/lang/Object" // import java.lang.Object
 import "Java/java/lang/System" // import java.lang.System
 import "Java/java/lang/Integer" // import java.lang.Integer

 m := System.CurrentTimeMillis() // System.currentTimeMillis()
 o := Object.New() // new Object()
 i := Integer.Decode("42") // Integer.decode("42")
 v := i.IntValue() // i.intValue()

ObjC frameworks

 import "ObjC/Foundation/NSDate" // @import Foundation.NSDate

 d := NSDate.New() // [[NSDate alloc] init]
 d = NSDate.Date() // [NSDate date]
 var desc string = d.Description() // [d description]


* Write Java classes in Go

An Android Activity

AndroidManifest.xml

 <activity android:name="GoActivity">

Go

 import "Java/android/app"
 import "Java/android/os"

 type GoActivity struct {
     app.Activity
 }

 func (a *GoActivity) OnCreate1(b os.Bundle) { ... }

Implementing Java interfaces works same way.

* Write Objective C classes in Go

An iOS UIResponder

 import "ObjC/UIKit"
 import "ObjC/Foundation"

 type GoUIResponder struct {
     UIKit.UIResponder
 }

 func (r *GoUIResponder) PressesBegan(_ Foundation.NSSet, _ UIKit.UIPressesEvent) { ... }

Conforming to Objective C protocols works the same way.

* Gobind gradle plugin (Android)

The updated gobind gradle plugin brings tighter integration with the Android plugin.
Apply it *after* the Android plugin.

build.gradle

 apply plugin: 'com.android.application'

 ...

 apply plugin: "org.golang.mobile.bind"

 gobind {
    pkg = "github.org/some/pkg"
 }


* Access to project dependencies

build.gradle

 dependencies {
    compile "com.android.support:appcompat-v7:24.2.1"
 }

Go

 import "Java/android/support/v7/app"

 type SupportActivity struct {
    app.AppCompatActivity
 }

* Resource classes, R.* (Android)

strings.xml

 <resources>
    <string name="activity_title">Pure Go Activities!</string>
 </resources>

Go

 import "Java/android/app"
 import Rstring "Java/go/demo/R/string"

 var act app.Activity = ...
 act.SetTitle_I(Rstring.Activity_title)

* Android databinding

activity_main.xml

 <layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <data>
        <variable name="act" type="go.demo.GoActivity"/>
    </data>
    <Button android:onClick="@{act::clickMe}"/>
 </layout>

Go

 import "Java/android/databinding/DataBindingUtil"
 import Rlayout "Java/go/demo/R/layout"
 import "Java/go/demo/databinding/ActivityMainBinding"

 func (a *GoActivity) OnCreate1(this app.Activity, b os.Bundle) {
     db := DataBindingUtil.SetContentView2(this, Rlayout.Activity_main)
     mainBind := ActivityMainBinding.Cast(db)
     mainBind.SetAct(this)
 }

 func (a *GoActivity) ClickMe(this app.Activity, v view.View) { ... }

* Caveats

- Still experimental. Changes happen.
- Go binaries still somewhat large.
: Grows slowly after initial cost. Compresses well.
- Reference cycles.
: Known to iOS users, kind of a bummer for Android users.

* Summary

- Export Go packages to Java and ObjC (and Swift).
- Access Java and ObjC API from Go.
- Write Java and ObjC classes directly in Go.
- On Android, use databinding and R.* resources from Go.
